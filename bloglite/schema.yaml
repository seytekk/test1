openapi: 3.0.3
info:
  title: BLOG LITE
  version: 1.0.0
paths:
  /api/schema/:
    get:
      operationId: api_schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - jwtAuth: []
      - bearerAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /blog/posts/:
    get:
      operationId: blog_posts_list
      description: Возвращает список постов, отсортированный по `created_at` по убыванию.
      summary: Список постов
      tags:
      - Posts
      security:
      - jwtAuth: []
      - bearerAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
          description: ''
    post:
      operationId: blog_posts_create
      description: |-
        Создаёт один или несколько постов.

        - Можно отправить один объект или массив объектов.
      summary: Создать пост(ы)
      tags:
      - Posts
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Post'
        required: true
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
          description: ''
        '400':
          description: Ошибка валидации
  /blog/posts/{id}/:
    get:
      operationId: blog_posts_retrieve
      description: Возвращает один пост по ID.
      summary: Получить пост
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - Posts
      security:
      - jwtAuth: []
      - bearerAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    put:
      operationId: blog_posts_update
      summary: Обновить пост
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - Posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    patch:
      operationId: blog_posts_partial_update
      summary: Частично обновить пост
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - Posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPost'
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    delete:
      operationId: blog_posts_destroy
      summary: Удалить пост
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - Posts
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '204':
          description: No response body
  /blog/posts/{id}/like/:
    post:
      operationId: posts_like_toggle
      description: |-
        Тогглит лайк текущего пользователя на посте.

        Возвращает текущее состояние и общее количество лайков.
      summary: Лайк/анлайк поста
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - Posts
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  liked:
                    type: boolean
                    example: true
                  likes_count:
                    type: integer
                    example: 5
                required:
                - liked
                - likes_count
          description: Состояние лайка и количество лайков
        '401':
          description: Требуется аутентификация
  /blog/posts/{id}/view/:
    get:
      operationId: posts_view_increment
      description: Атомарно увеличивает поле `views` поста на 1 и возвращает новое
        значение.
      summary: Увеличить счётчик просмотров
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - Posts
      security:
      - jwtAuth: []
      - bearerAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  views:
                    type: integer
                    example: 42
                required:
                - views
          description: Текущее количество просмотров
  /blog/subposts/:
    get:
      operationId: blog_subposts_list
      description: Возвращает список субпостов, отсортированный по `created_at` по
        убыванию.
      summary: Список субпостов
      tags:
      - SubPosts
      security:
      - jwtAuth: []
      - bearerAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubPost'
          description: ''
    post:
      operationId: blog_subposts_create
      description: Создаёт один субпост. Поля, рассчитываемые на сервере, помечайте
        как `read_only` в сериализаторе.
      summary: Создать субпост
      tags:
      - SubPosts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubPost'
        required: true
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubPost'
          description: ''
  /blog/subposts/{id}/:
    get:
      operationId: blog_subposts_retrieve
      description: Возвращает один субпост по ID.
      summary: Получить субпост
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this sub post.
        required: true
      tags:
      - SubPosts
      security:
      - jwtAuth: []
      - bearerAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubPost'
          description: ''
    put:
      operationId: blog_subposts_update
      summary: Обновить субпост
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this sub post.
        required: true
      tags:
      - SubPosts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubPost'
        required: true
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubPost'
          description: ''
    patch:
      operationId: blog_subposts_partial_update
      summary: Частично обновить субпост
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this sub post.
        required: true
      tags:
      - SubPosts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSubPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSubPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSubPost'
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubPost'
          description: ''
    delete:
      operationId: blog_subposts_destroy
      summary: Удалить субпост
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this sub post.
        required: true
      tags:
      - SubPosts
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '204':
          description: No response body
  /blog/subposts/{id}/like/:
    post:
      operationId: subposts_like_toggle
      description: Тогглит лайк текущего пользователя на субпосте и возвращает состояние
        и общее число лайков.
      summary: Лайк/анлайк субпоста
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this sub post.
        required: true
      tags:
      - SubPosts
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  liked:
                    type: boolean
                    example: true
                  likes_count:
                    type: integer
                    example: 7
                required:
                - liked
                - likes_count
              examples:
                ОтветПриПостановкеЛайка:
                  value:
                    liked: true
                    likes_count: 8
                  summary: Ответ при постановке лайка
                ОтветПриСнятииЛайка:
                  value:
                    liked: false
                    likes_count: 7
                  summary: Ответ при снятии лайка
          description: Состояние лайка и количество лайков
        '401':
          description: Требуется аутентификация
  /blog/subposts/{id}/view/:
    get:
      operationId: subposts_view_increment
      description: Атомарно увеличивает поле `views` на 1 и возвращает новое значение.
      summary: Увеличить счётчик просмотров субпоста
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this sub post.
        required: true
      tags:
      - SubPosts
      security:
      - jwtAuth: []
      - bearerAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  views:
                    type: integer
                    example: 42
                required:
                - views
              examples:
                Ответ:
                  value:
                    views: 43
          description: Текущее число просмотров
  /users/login/:
    post:
      operationId: users_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /users/me/:
    get:
      operationId: users_me_retrieve
      summary: Текущий пользователь
      tags:
      - Auth
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeResponse'
          description: ''
  /users/register/:
    post:
      operationId: users_register_create
      description: Создаёт пользователя и возвращает access/refresh токены.
      summary: Регистрация
      tags:
      - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - jwtAuth: []
      - bearerAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              examples:
                УспешнаяРегистрация:
                  value:
                    id: 1
                    username: alice
                    access: xxx
                    refresh: yyy
                  summary: Успешная регистрация
          description: ''
        '400':
          description: No response body
  /users/token/refresh/:
    post:
      operationId: users_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      security:
      - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    AuthResponse:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        access:
          type: string
        refresh:
          type: string
      required:
      - access
      - id
      - refresh
      - username
    MeResponse:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        is_superuser:
          type: boolean
      required:
      - id
      - is_superuser
      - username
    PatchedPost:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
        body:
          type: string
        author:
          allOf:
          - $ref: '#/components/schemas/Register'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        views:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        subposts:
          type: array
          items:
            $ref: '#/components/schemas/SubPost'
        likes_count:
          type: integer
          readOnly: true
    PatchedSubPost:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
        body:
          type: string
        post:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        views:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        likes_count:
          type: integer
          readOnly: true
    Post:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
        body:
          type: string
        author:
          allOf:
          - $ref: '#/components/schemas/Register'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        views:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        subposts:
          type: array
          items:
            $ref: '#/components/schemas/SubPost'
        likes_count:
          type: integer
          readOnly: true
      required:
      - author
      - body
      - created_at
      - id
      - likes_count
      - subposts
      - title
      - updated_at
    Register:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - password
      - password2
      - username
    SubPost:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
        body:
          type: string
        post:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        views:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        likes_count:
          type: integer
          readOnly: true
      required:
      - body
      - created_at
      - id
      - likes_count
      - post
      - title
      - updated_at
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
